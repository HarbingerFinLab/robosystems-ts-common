generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String?    @unique
  email         String?    @unique
  password      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  qbAuth        QBAuth[]
  plaidAuth     PlaidAuth[]
  apiKeys       APIKey[]

  @@index([id], type: Hash)
  @@index([name], type: Hash)
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model QBAuth {
  id            String   @id @default(cuid())
  userId        String
  companyId     String
  realmId       String
  accessToken   String?
  refreshToken  String?
  expiresAt     DateTime
  user          User    @relation(fields: [userId], references: [id])

  @@unique([userId, realmId])
}

model APIKey {
  id            String   @id @default(cuid())
  userId        String
  name          String
  key           String   @unique
  graphId       String?  // The graph database ID for company context
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastUsedAt    DateTime?
  expiresAt     DateTime?
  isActive      Boolean  @default(true)
  isSystem      Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key], type: Hash)
  @@index([userId], type: Hash)
}

model PlaidAuth {
  id              String   @id @default(cuid())
  userId          String
  companyId       String
  itemId          String
  accessToken     String
  publicToken     String?
  accountIds      String[]
  institutionId   String
  institutionName String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, itemId])
  @@index([itemId], type: Hash)
}